version: '3.8'

services:

  # Frontend service
  frontend:
    build:
      context: ./task-management-system-front-end
      dockerfile: Dockerfile.dev
    container_name: frontend-app-container
    ports:
      - "8000:8000"
    networks:
      - frontend-backend-database-network
    depends_on:
      - backend-app
    volumes:
      - ./task-management-system-front-end:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend service
  backend-app:
    build:
      context: ./task-management-system-back-end
      dockerfile: Dockerfile.dev
    container_name: backend-app-container
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - database-app
    volumes:
      - ./task-management-system-back-end:/app
      - /app/node_modules
    environment:
      POSTGRES_HOST: database-app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: task-management-system-database
      POSTGRES_PORT: 5432
      APP_PORT: 3000
    networks:
      - frontend-backend-database-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sSf http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database service
  database-app:
    image: postgres:latest
    container_name: database-app-container
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345678
      POSTGRES_DB: task-management-system-database
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - frontend-backend-database-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  frontend-backend-database-network:       
